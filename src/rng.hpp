////////////////////////////////////////////////////////////////////////////////////////////////////
/* Trent Julich ~ 23 August 2021                                                                  */
////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include <cmath>
#include <random>
#include <limits>
#include <type_traits>

////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Class for generating random numbers of various data types.
 */
class RandomNumberGenerator
{
public:
  
  const static int DEFAULT_MAX = 1000;
  const static int DEFAULT_MIN = 0;

  /**
   * Constructor for random number generator, used to generate ints and floats within specified 
   * ranges.
   * 
   * initialFloatMin: The initial minimum value that can be generated for floats.
   * initialFloatMax: The initial maximum value that can be generated for floats.
   * initialIntMin: The initial minimum value that can be generated for ints.
   * initialIntMax: The initial maximum value that can be generated for ints.
   */
  RandomNumberGenerator(float initialFloatMin = static_cast<float>(DEFAULT_MIN), 
                        float initialFloatMax = static_cast<float>(DEFAULT_MAX),
                        int initialIntMin = DEFAULT_MIN, int initialIntMax = DEFAULT_MAX);

  /**
   * Used to generate and return a random int value within this generators pre-specified range.
   * 
   * returns: Random int value within this generators range.
   */
  int getRandInt() { return intDistr(randEngine); }

  /**
   * Used to generate and return a random float value within this generators pre-specified range.
   * 
   * returns: Random float value within this generators range.
   */
  float getRandFloat() { return floatDistr(randEngine); }

  /**
   * Used to set the range of the distribution from which random floats will be generated.
   * 
   * min: Minimum possible value to generate.
   * max: Maximum possible value to generate.
   */
  void setFloatRange(float min, float max)
  {
    floatDistr = std::uniform_real_distribution<float>(minFloat, (std::nextafter(maxFloat,
      std::numeric_limits<float>::max())));
  }

  /**
   * Used to set the range of the distribution from which random ints will be generated.
   * 
   * min: Minimum possible value to generate.
   * max: Maximum possible value to generate.
   */
  void setIntRange(int min, int max) 
  {
    intDistr = std::uniform_int_distribution<int>(min, max);
  }
  

private:

  /**
   * Engine for generating random numbers of different types.
   */
  std::default_random_engine randEngine;

  /**
   * Distribution in which random floats will fall.
   */
  std::uniform_real_distribution<float> floatDistr;

  /**
   * Distribution in which random ints will fall.
   */
  std::uniform_int_distribution<int> intDistr;

  /**
   * The maximum int value that will be generated by the rng. 
   */
  int maxInt;

  /**
   * The minimum int value that will be generated by the rng.
   */
  int minInt;

  /**
   * The maximum float value that will be generated by the rng.
   */
  float maxFloat;

  /**
   * The minimum float value that will be generated by the rng.
   */
  float minFloat;
};

////////////////////////////////////////////////////////////////////////////////////////////////////